{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withKeys as _withKeys, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelCheckbox as _vModelCheckbox, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"boite\"\n};\nconst _hoisted_3 = {\n  class: \"header\"\n};\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h1\", {\n  class: \"titre\"\n}, \"ToDo\", -1\n/* HOISTED */\n);\n\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n);\n\nconst _hoisted_6 = {\n  class: \"row\"\n};\nconst _hoisted_7 = {\n  class: \"row\",\n  style: {\n    \"border\": \"solid 2px red\",\n    \"text-align\": \"left\",\n    \"background-color\": \"rgb(200,200,200)\",\n    \"margin-top\": \"20px\"\n  }\n};\nconst _hoisted_8 = [\"onUpdate:modelValue\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"header\", _hoisted_3, [_hoisted_4, _hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_withDirectives(_createElementVNode(\"input\", {\n    class: \"col-6 offset-3\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.action = $event),\n    type: \"text\",\n    name: \"\",\n    placeholder: \"Insérer une nouvelle tâche\",\n    onKeyup: _cache[1] || (_cache[1] = _withKeys((...args) => $options.addNew && $options.addNew(...args), [\"enter\"]))\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), [[_vModelText, $data.action]])])]), _createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.taches, tache => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: _normalizeClass([\"col-6 offset-3\", {\n        barre: tache.completed\n      }]),\n      key: tache\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"checkbox\",\n      \"onUpdate:modelValue\": $event => tache.completed = $event,\n      name: \"\",\n      value: \"\"\n    }, null, 8\n    /* PROPS */\n    , _hoisted_8), [[_vModelCheckbox, tache.completed]]), _createTextVNode(\" \" + _toDisplayString(tache.name), 1\n    /* TEXT */\n    )], 2\n    /* CLASS */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _createElementVNode(\"footer\", null, [_createElementVNode(\"strong\", null, _toDisplayString($options.remain) + \" tâche(s) restante(s)\", 1\n  /* TEXT */\n  )])])]);\n}","map":{"version":3,"mappings":";;AACSA,OAAK,EAAC;;;AACFA,OAAK,EAAC;;;AACCA,OAAK,EAAC;;;gCACVC,oBAA2B,IAA3B,EAA2B;AAAvBD,OAAK,EAAC;AAAiB,CAA3B,EAAkB,MAAlB,EAAsB;AAAA;AAAtB;;gCAA2BC,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;AACtBD,OAAK,EAAC;;;AAIVA,OAAK,EAAC;AAAME,OAAsG,EAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;;;;uBARzBC,oBAgBM,KAhBN,cAgBM,CAfFF,oBAcM,KAdN,cAcM,CAbFA,oBAKU,QALV,cAKU,CAJNG,UAIM,EAJqBC,UAIrB,EAHNJ,oBAEM,KAFN,cAEM,iBADFA,oBAAkI,OAAlI,EAAkI;AAA3HD,SAAK,EAAC,gBAAqH;+DAA3FM,eAAMC,OAAqF;AAAnFC,QAAI,EAAC,MAA8E;AAAvEC,QAAI,EAAC,EAAkE;AAA/DC,eAAW,EAAC,4BAAmD;AAArBC,WAAK,mDAAQC,2CAAR,EAAc,SAAd;AAAgB,GAAlI;;AAAA,oBAAuCN,eACrC,CAFN,CAGM,CALV,CAaE,EAPFL,oBAKM,KALN,cAKM,oBAJFE,oBAGMU,SAHN,EAGM,IAHN,EAGMC,YAHsCR,YAGtC,EAH6BS,KAAe,IAAV;yBAAxCZ,oBAGM,KAHN,EAGM;AAHDH,WAAK,mBAAC,gBAAD,EAAiB;AAAAgB,eAAyCD,KAAK,CAACE;AAA/C,OAAjB,EAGJ;AAHiFC,SAAG,EAAEH;AAGtF,KAHN,mBACId,oBAAmE,OAAnE,EAAmE;AAA5DO,UAAI,EAAC,UAAuD;uCAAnCO,KAAK,CAACE,YAASV,MAAoB;AAAlBE,UAAI,EAAC,EAAa;AAAVU,WAAK,EAAC;AAAI,KAAnE;;AAAA,sCAAgCJ,KAAK,CAACE,+BAA6B,MACnEG,iBAAGL,KAAK,CAACN,IAAT,GAAa;AAAA;MAFjB;;AAAA;GAGM,CAHN;;AAAA,GAIE,EALN,CAOE,EADFR,oBAAiE,QAAjE,EAAiE,IAAjE,EAAiE,CAAzDA,oBAAgD,QAAhD,EAAgD,IAAhD,EAAgDmB,iBAAtCR,eAAsC,IAA9B,uBAAlB,EAAuC;AAAA;AAAvC,GAAyD,CAAjE,CACE,CAdN,CAeE,CAhBN","names":["class","_createElementVNode","style","_createElementBlock","_hoisted_4","_hoisted_5","$data","$event","type","name","placeholder","onKeyup","$options","_Fragment","_renderList","tache","barre","completed","key","value","_toDisplayString"],"sourceRoot":"","sources":["/home/marcolin/Documents/Mon_Projet/new_vue/src/components/TodoComp.vue"],"sourcesContent":["<template id=\"\">\n    <div class=\"container\">\n        <div class=\"boite\">\n            <header class=\"header\">\n                <h1 class=\"titre\">ToDo</h1><br>\n                <div class=\"row\" >\n                    <input class=\"col-6 offset-3\" v-model=\"action\" type=\"text\" name=\"\" placeholder=\"Insérer une nouvelle tâche\" @keyup.enter=\"addNew\">\n                </div>\n            </header >\n            <div class=\"row\" style=\"border: solid 2px red; text-align: left; background-color: rgb(200,200,200); margin-top: 20px;\">\n                <div class=\"col-6 offset-3\" v-for=\"tache in taches\" :class=\"{barre: tache.completed}\" :key=\"tache\">\n                    <input type=\"checkbox\" v-model=\"tache.completed\" name=\"\" value=\"\" >\n                    {{ tache.name }}\n                </div>\n            </div>\n            <footer><strong>{{remain}} tâche(s) restante(s)</strong></footer>\n        </div>\n    </div>\n\n</template>\n\n<script>\n\n    export default {\n        name: \"TodoComp\",\n        data() {\n            return{\n                taches: [{\n                    name: \"first action\",\n                    completed: false\n                }],\n                action: \"\"\n            }\n        },\n        methods: {\n            addNew() {\n                this.taches.push({\n                    name: this.action,\n                    completed: false\n                    })\n                    this.action=\"\"\n            }\n        },\n        computed: {\n            remain() {\n                return this.taches.filter((taches) => !taches.completed).length\n            }\n        }\n    }\n\n</script>\n\n<style media=\"screen\">\n    .titre{\n        text-align: center;\n        font-size: 50px;\n        color: rgba(255, 0, 0,0.3);\n    }\n    .barre{\n        text-decoration: line-through;\n        color: rgba(0,0,0,0.2)\n    }\n</style>\n"]},"metadata":{},"sourceType":"module"}